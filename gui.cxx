// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "gui.h"
#include "scene.h"
#include <iostream>
void GUI::cb_DBG_i(Fl_Button*, void*) {
  DBG_cb();
}
void GUI::cb_DBG(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_DBG_i(o,v);
}

void GUI::cb_AMB_i(Fl_Slider *, void*) {
    AMB_cb();
}
void GUI::cb_AMB(Fl_Slider* o, void* v) {
    std::cerr << o->value() << endl;
    scene->ka = o->value();
    ((GUI*)(o->parent()->user_data()))->cb_AMB_i(o, v);
}

void GUI::cb_SPEC_i(Fl_Slider*, void*) {
    SPEC_cb();
}
void GUI::cb_SPEC(Fl_Slider* o, void* v) {
    std::cerr << o->value() << endl;
    scene->sa = o->value();
    ((GUI*)(o->parent()->user_data()))->cb_SPEC_i(o, v);
}

void GUI::cb_SM1_i(Fl_Button*, void*) {
    SM1_cb();
}
void GUI::cb_SM1(Fl_Button* o, void* v) {
    ((GUI*)(o->parent()->user_data()))->cb_SM1_i(o, v);
}

void GUI::cb_SM2_i(Fl_Button*, void*) {
    SM2_cb();
}
void GUI::cb_SM2(Fl_Button* o, void* v) {
    ((GUI*)(o->parent()->user_data()))->cb_SM2_i(o, v);
}

void GUI::cb_SM3_i(Fl_Button*, void*) {
    SM3_cb();
}
void GUI::cb_SM3(Fl_Button* o, void* v) {
    ((GUI*)(o->parent()->user_data()))->cb_SM3_i(o, v);
}

void GUI::cb_TilingMode_i(Fl_Button*, void*) {
    TilingMode_cb();
}
void GUI::cb_TilingMode(Fl_Button* o, void* v) {
    ((GUI*)(o->parent()->user_data()))->cb_TilingMode_i(o, v);
}

void GUI::cb_NewButton_i(Fl_Return_Button*, void*) {
  NewButton_cb();
}
void GUI::cb_NewButton(Fl_Return_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_NewButton_i(o,v);
}

GUI::GUI() {
  { uiw = new Fl_Double_Window(300, 400, "GUI");
    uiw->user_data((void*)(this));
    { Fl_Button* o = new Fl_Button(15, 15, 95, 40, "DBG");
      o->selection_color(FL_DARK_RED);
      o->callback((Fl_Callback*)cb_DBG);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(150, 15, 100, 50, "SM1");
    o->selection_color(FL_DARK_RED);
    o->callback((Fl_Callback*)cb_SM1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(150, 80, 100, 50, "SM2");
    o->selection_color(FL_DARK_RED);
    o->callback((Fl_Callback*)cb_SM2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(150, 145, 100, 50, "SM3");
    o->selection_color(FL_DARK_RED);
    o->callback((Fl_Callback*)cb_SM3);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(15, 280, 235, 50, "Tiling Mode");
    o->selection_color(FL_DARK_RED);
    o->callback((Fl_Callback*)cb_TilingMode);
    } // Fl_Button* o
    { Fl_Slider* o = new Fl_Slider(FL_HOR_NICE_SLIDER, 15, 215, 95, 40, "Ambience");
    o->callback((Fl_Callback*)cb_AMB);
    o->bounds(0.0, 1.0);
    //o->callback((Fl_Callback*)cb_AMB);
    } // Fl_Button* o
    { Fl_Slider* o = new Fl_Slider(FL_HOR_NICE_SLIDER, 150, 215, 95, 40, "Specular");
    o->callback((Fl_Callback*)cb_SPEC);
    o->bounds(5.0, 100.0);
    } // Fl_Button* o
    { Fl_Return_Button* o = new Fl_Return_Button(15, 80, 110, 100, "Play");
      o->callback((Fl_Callback*)cb_NewButton);
    } // Fl_Return_Button* o
    uiw->end();
  } // Fl_Double_Window* uiw
}

int main(int argc, char **argv) {
  scene = new Scene;
  //scene->Name();
  return Fl::run();
}

void GUI::show() {
  uiw->show();
}

void GUI::DBG_cb() {
  scene->DBG();
}

void GUI::SM1_cb() {
    scene->SM1();
}

void GUI::SM2_cb() {
    scene->SM2();
}

void GUI::SM3_cb() {
    scene->SM3();
}

void GUI::AMB_cb() {
    scene->AMB();
}

void GUI::SPEC_cb() {
    scene->SPEC();
}

void GUI::TilingMode_cb() {
    scene->TilingMode();
}

void GUI::NewButton_cb() {
  scene->NewButton();
}
